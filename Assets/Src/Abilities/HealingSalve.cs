//------------------------------------------------------------------------------
// <auto-generated>
//     Denna kod har genererats av ett verktyg.
//     Körtidsversion:4.0.30319.34014
//
//     Ändringar i denna fil kan orsaka fel och kommer att förloras om
//     koden återgenereras.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;

public class HealingSalve: Ability, TargetedAbility, AIAbility
{
	public int duration=2;
	public int uses=2;
	private Stats statBuff =new Stats(new UnitMove(0),0,2,2,2,2,2,2);
	private Unit target;
	private DurationBuff buff;

	public int judgeAbility(Unit user, Tile move, out Tile target)
	{
		HashSet<Tile> possibleTargets=GetAvailableTargets(move);
		target=null;
		if(possibleTargets.Count==0)
		{
			return 0;
		}
		
		int value = 0;
		int maxValue =0;
		foreach(Tile q in possibleTargets)
		{
			value=0;
			if(q.Unit.damageTaken< user.ModifiedStats.intelligence+10)
			{
				value=0;
			}
			else
			{
				value=q.Unit.damageTaken;
				value+=5;
				HashSet<Unit> enemyUnits=UnitManager.Instance.GetUnitsByHostility(user);
				foreach(Unit u in enemyUnits)
				{
					if(Melee.StaticGetTiles(u.Tile).Contains(move))
					{
						value-=1;
					}
					if(Ranged.staticGetTiles(u.Tile).Contains(move))
					{
						value-=1;
					}
				}
			}

			if (value>maxValue)
			{
				target=q;
				maxValue=value;
			}
		}
		return maxValue;
	}

	public bool willCast()
	{
		if(uses==0)
		{
			return false;
		}
		else 
		{
			return true;
		}
	}

	public Ability getAbility
	{
		get
		{
			return this;
		}
	}

	public override void Use(){
		if (uses>0){
			TargetedAbilityInputManager.Instance.Listen(this);
		}
		else{
			GUInterface.Instance.PrintMessage("OUT OF USES!!!");
		}
	}
	
	public override string Name{
		get{return uses + "x Healing Salve";}
	}

	public void Notify(Tile target)
	{
		int power = GetComponent<Unit>().ModifiedStats.intelligence+10;
		target.Unit.Heal(power);
		// target.Unit.AddStatMod(statBuff);  // Obsolete (and haxxy)
		this.target=target.Unit;
		new DurationBuff(duration, statBuff, this.target);
		uses--;
		FinishUse();
	}

	public HashSet<Tile> GetAvailableTargets()
	{
		Unit host = GetComponent<Unit>();
		HashSet<Tile> retVal=new HashSet<Tile>();
		if(host == null){
			Debug.LogError("host not found, is the zecora heal ability sitting on a unit?");
		}else{
			retVal.Add(host.Tile);
			foreach(Tile t in Melee.StaticGetTiles(host.Tile)){
				if(t.isOccuppied && !host.isHostile(t.Unit)){
					retVal.Add(t);
				}
			}
		}
		return retVal;
	}

	public HashSet<Tile> GetAvailableTargets(Tile tile)
	{
		Unit host = GetComponent<Unit>();
		HashSet<Tile> retVal=new HashSet<Tile>();
		if(host == null){
			Debug.LogError("host not found, is the zecora heal ability sitting on a unit?");
		}else{
			retVal.Add(host.Tile);
			foreach(Tile t in Melee.StaticGetTiles(tile)){
				if(t.isOccuppied && !host.isHostile(t.Unit)){
					retVal.Add(t);
				}
			}
		}
		return retVal;
	}
}