//------------------------------------------------------------------------------
// <auto-generated>
//     Denna kod har genererats av ett verktyg.
//     Körtidsversion:4.0.30319.34014
//
//     Ändringar i denna fil kan orsaka fel och kommer att förloras om
//     koden återgenereras.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

public class Summon : AbilityWithManacost, TargetedAbility
{
	public Unit unit;
	public int maxNumberOfCretins = 1;
	private List<Unit> cretins=new List<Unit>();

	public override int ManaCost {
		get {
			return 3;
		}
	}

	public override string Name{
		get{return "Summon Changeling";}
	}

	public override void Use()
	{
		if(GetComponent<Mana>().CanCast(ManaCost))
		   TargetedAbilityInputManager.Instance.Listen(this);
		else
			OOM();
	}
	public void Start(){
		if(unit == null){
			Debug.LogWarning(this + " is missing a unit to summon! Using default");
			unit = Resources.Load<GameObject>("Changeling").GetComponent<Unit>();
		}
	}

	public void Notify(Tile target)
	{
		for(int i = cretins.Count-1; i >= 0; i--){ // clean out dead creatures from the list
			if(! cretins[i].IsAlive){
				cretins.RemoveAt(i);
			}
		}
		GameObject go = Instantiate(unit.gameObject) as GameObject;
		Unit iSpawned = go.GetComponent<Unit>();
		iSpawned.name = unit.name;
//		Stats stats = new Stats(iSpawned.baseStats.movement, host.baseStats.maxHP/2, host.baseStats.attack-2, host.baseStats.defense/2, host.baseStats.resistance/2);
//		iSpawned.baseStats=stats;
		Unit summoner = GetComponent<Unit>();
		iSpawned.level = summoner.level;
		iSpawned.RecalcBaseStats();
		if(!iSpawned.MoveTo(target)){
			Debug.LogError("Unable to Spawn unit! This is like a fatal error"); // Shouldn't really happen in this case
		}
		cretins.Add(iSpawned);
		iSpawned.gameObject.AddComponent<FollowAI>().Follow(this);
		/*if (cretins.Count>maxNumberOfCretins)
		{
			cretins[0].Death();
			cretins.RemoveAt(0);
		}*/
		// summoner.Damage(3 + summoner.level/2, AttackType.True);
		FinishUse();
	}

	public System.Collections.Generic.HashSet<Tile> GetAvailableTargets()
	{
		Unit host = GetComponent<Unit>();
		HashSet<Tile> retVal=new HashSet<Tile>();
		if(host == null){
			Debug.LogError("Unit not found on ability, does the ability sit on something?");
		}
		else{
			foreach(Tile t in Melee.StaticGetTiles(host.Tile)){
				if(!t.isOccuppied)
				{
					retVal.Add(t);
				}
			}
		}
		return retVal;
	}

	public HashSet<Tile> GetAvailableTargets(Tile tile)
	{
		Unit host = GetComponent<Unit>();
		HashSet<Tile> retVal=new HashSet<Tile>();
		if(host == null){
			Debug.LogError("Unit not found on ability, does the ability sit on something?");
		}
		else{
			foreach(Tile t in Melee.StaticGetTiles(tile)){
				if(!t.isOccuppied)
				{
					retVal.Add(t);
				}
			}
		}
		return retVal;
	}

}

